buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'cctv-server'
    version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/generated']
        }
    }
}

configurations {
    providedRuntime
    querydslapt

    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'slf4j-jcl'
    all*.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("mysql:mysql-connector-java:5.1.36")
    compile("com.mysema.querydsl:querydsl-jpa:3.6.5")

    compile("org.modelmapper:modelmapper:0.7.4")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("commons-io:commons-io:2.4")
    compile("commons-codec:commons-codec:1.10")

    compile("org.imgscalr:imgscalr-lib:4.2")

    compile("com.google.guava:guava:19.0-rc1")
    compile("org.projectlombok:lombok:1.16.4")

    querydslapt("com.mysema.querydsl:querydsl-apt:3.6.5")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task generateSources(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

bootRepackage  {
    classifier = 'exec'
}

compileJava {
    dependsOn generateSources
    source generateSources.destinationDir
}

compileGeneratedJava {
    dependsOn generateSources
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/generated')
    }
}
